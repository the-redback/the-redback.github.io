@article{app11177856,
	title        = {On Microservice Analysis and Architecture Evolution: A Systematic Mapping Study},
	author       = {Bushong, Vincent and Abdelfattah, Amr S. and Maruf, Abdullah A. and Das, Dipta and Lehman, Austin and Jaroszewski, Eric and Coffey, Michael and Cerny, Tomas and Frajtak, Karel and Tisnovsky, Pavel and Bures, Miroslav},
	year         = 2021,
	journal      = {Applied Sciences},
	volume       = 11,
	number       = 17,
	doi          = {10.3390/app11177856},
	issn         = {2076-3417},
	url          = {https://www.mdpi.com/2076-3417/11/17/7856},
	article-number = 7856,
	abstract     = {Microservice architecture has become the leading design for cloud-native systems. The highly decentralized approach to software development consists of relatively independent services, which provides benefits such as faster deployment cycles, better scalability, and good separation of concerns among services. With this new architecture, one can naturally expect a broad range of advancements and simplifications over legacy systems. However, microservice system design remains challenging, as it is still difficult for engineers to understand the system module boundaries. Thus, understanding and explaining the microservice systems might not be as easy as initially thought. This study aims to classify recently published approaches and techniques to analyze microservice systems. It also looks at the evolutionary perspective of such systems and their analysis. Furthermore, the identified approaches target various challenges and goals, which this study analyzed. Thus, it provides the reader with a roadmap to the discipline, tools, techniques, and open challenges for future work. It provides a guide towards choices when aiming for analyzing cloud-native systems. The results indicate five analytical approaches commonly used in the literature, possibly in combination, towards problems classified into seven categories.}
}
@article{bakhtin_survey_2022,
	title        = {Survey on {Tools} and {Techniques} {Detecting} {Microservice} {API} {Patterns}},
	author       = {Bakhtin, Alexander and Maruf, Abdullah Al and Cerny, Tomas and Taibi, Davide},
	year         = 2022,
	doi          = {10.48550/ARXIV.2205.10133},
	url          = {https://arxiv.org/abs/2205.10133},
	urldate      = {2022-07-06},
	copyright    = {Creative Commons Attribution 4.0 International},
	abstract     = {It is well recognized that design patterns improve system development and maintenance in many aspects. While we commonly recognize these patterns in monolithic systems, many patterns emerged for cloud computing, specifically microservices. Unfortunately, while various patterns have been proposed, available quality assessment tools often do not recognize many. This article performs a grey literature review to find and catalog available tools to detect microservice API patterns (MAP). It reasons about mechanisms that can be used to detect these patterns. Furthermore, the results indicate gaps and opportunities for improvements for quality assessment tools. Finally, the reader is provided with a route map to detection techniques that can be used to mine MAPs.},
	keywords     = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences}
}
@article{10.1145/3512753.3512755,
	title        = {Technical Debt Resulting from Architectural Degradation and Code Smells: A Systematic Mapping Study},
	author       = {Das, Dipta and Maruf, Abdullah Al and Islam, Rofiqul and Lambaria, Noah and Kim, Samuel and Abdelfattah, Amr S. and Cerny, Tomas and Frajtak, Karel and Bures, Miroslav and Tisnovsky, Pavel},
	year         = 2022,
	month        = {jan},
	journal      = {SIGAPP Appl. Comput. Rev.},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 21,
	number       = 4,
	pages        = {20â€“36},
	doi          = {10.1145/3512753.3512755},
	issn         = {1559-6915},
	url          = {https://doi.org/10.1145/3512753.3512755},
	issue_date   = {December 2021},
	abstract     = {Poor design choices, bad coding practices, or the need to produce software quickly can stand behind technical debt. Unfortunately, manually identifying and managing technical debt gets more difficult as the software matures. Recent research offers various techniques to automate the process of detecting and managing technical debt to address these challenges. This manuscript presents a mapping study of the many aspects of technical debt that have been discovered in this field of study. This includes looking at the various forms of technical debt, as well as detection methods, the financial implications, and mitigation strategies. The findings and outcomes of this study are applicable to a wide range of software development life-cycle decisions.},
	numpages     = 17,
	keywords     = {code smells, architectural debt, technical debt, code debt, design debt, architectural degradation}
}
@article{electronics11121880,
	title        = {Code Smell Prioritization with Business Process Mining and Static Code Analysis: A Case Study},
	author       = {Islam, Md Rofiqul and Al Maruf, Abdullah and Cerny, Tomas},
	year         = 2022,
	journal      = {Electronics},
	volume       = 11,
	number       = 12,
	doi          = {10.3390/electronics11121880},
	issn         = {2079-9292},
	url          = {https://www.mdpi.com/2079-9292/11/12/1880},
	article-number = 1880,
	abstract     = {One of the most significant impediments to the long-term maintainability of software applications is code smells. Keeping up with the best coding practices can be difficult for software developers, which might lead to performance throttling or code maintenance concerns. As a result, it is imperative that large applications be regularly monitored for performance issues and code smells, so that these issues can be corrected promptly. Resolving code smells in software systems can be done in a variety of ways, but doing so all at once would be prohibitively expensive and can be out of budget. Prioritizing these solutions are therefore critical. The majority of current research prioritizes code smells according to the type of smell they cause. This method, however, is not sufficient because of a lack of knowledge regarding the frequency of code usage and code changeability behavior. Even the most complex programs have some components that are more important than others. Maintaining the functionality of certain parts is essential since they are often used. Identifying and correcting code smells in places that are frequently utilized and subject to rapid change should take precedence over other code smells. A novel strategy is proposed for finding frequently used and change-prone areas in a codebase by combining business logic, heat map information, and commit history analysis in this study. It examines the codebase, commits, and log files of Java applications to identify business processes, heat map graphs, and severity levels of various types of code smells and their commit history. This is done in order to present a comprehensive, efficient, and resource-friendly technique for identifying and prioritizing performance throttling with also handling code maintenance concerns.}
}
@inproceedings{9678532,
	title        = {Using Version Control and Issue Tickets to detect Code Debt and Economical Cost},
	author       = {Al Maruf, Abdullah and Lambaria, Noah and Abdelfattah, Amr S. and Cerny, Tomas},
	year         = 2021,
	booktitle    = {2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	volume       = {},
	number       = {},
	pages        = {1208--1209},
	doi          = {10.1109/ASE51524.2021.9678532}
}
@inproceedings{9678749,
	title        = {Using Static Analysis to Address Microservice Architecture Reconstruction},
	author       = {Bushong, Vincent and Das, Dipta and Al Maruf, Abdullah and Cerny, Tomas},
	year         = 2021,
	booktitle    = {2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	volume       = {},
	number       = {},
	pages        = {1199--1201},
	doi          = {10.1109/ASE51524.2021.9678749}
}
@techreport{maruf_using_2022,
	title        = {Using {Microservice} {Telemetry} {Data} for {System} {Dynamic} {Analysis}},
	author       = {Maruf, Abdullah Al and Bakhtin, Alexander and Cerny, Tomas and Taibi, Davide},
	year         = 2022,
	month        = jul,
	number       = {arXiv:2207.02776},
	url          = {http://arxiv.org/abs/2207.02776},
	urldate      = {2022-07-07},
	note         = {arXiv:2207.02776 [cs] type: article},
	abstract     = {Microservices bring various benefits to software systems. They also bring decentralization and lose coupling across self-contained system parts. Since these systems likely evolve in a decentralized manner, they need to be monitored to identify when possibly poorly designed extensions deteriorate the overall system quality. For monolith systems, such tasks have been commonly addressed through static analysis. However, given the decentralization and possible language diversity across microservices, static analysis tools are lacking. On the other hand, there are available tools commonly used by practitioners that offer centralized logging, tracing, and metric collection for microservices. In this paper, we assess the opportunity to combine current dynamic analysis tools with anomaly detection in the form of quality metrics and anti-patterns. We develop a tool prototype that we use to assess a large microservice system benchmark demonstrating the feasibility and potential of such an approach.},
	institution  = {arXiv},
	keywords     = {Computer Science - Software Engineering}
}
