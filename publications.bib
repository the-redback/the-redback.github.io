@article{CERNY2023111829,
	title        = {Catalog and detection techniques of microservice anti-patterns and bad smells: A tertiary study},
	author       = {Tomas Cerny and Amr S. Abdelfattah and Abdullah Al Maruf and Andrea Janes and Davide Taibi},
	year         = 2023,
	month        = {sep},
	journal      = {Journal of Systems and Software},
	volume       = 206,
	pages        = 111829,
	doi          = {https://doi.org/10.1016/j.jss.2023.111829},
	issn         = {0164-1212},
	url          = {https://www.sciencedirect.com/science/article/pii/S0164121223002248},
	keywords     = {Microservices, Anti-patterns, Antipatterns, Anti patterns, Bad smells, Software maintenance},
	abstract     = {Background: Various works investigated microservice anti-patterns and bad smells in the past few years. We identified seven secondary publications that summarize these, but they have little overlap in purpose and often use different terms to describe the identified anti-patterns and smells. Objective: This work catalogs recurring bad design practices known as anti-patterns and bad smells for microservice architectures, and provides a classification into categories as well as methods for detecting these practices. Method: We conducted a systematic literature review in the form of a tertiary study targeting secondary studies identifying poor design practices for microservices. Results: We provide a comprehensive catalog of 58 disjoint anti-patterns, grouped into five categories, which we derived from 203 originally identified anti-patterns for microservices. Conclusion: The results provide a reference to microservice developers to design better-quality systems and researchers who aim to detect system quality based on anti-patterns. It also serves as an anti-pattern catalog for development-aiding tools, which are not currently available for microservice system development but could mitigate quality degradation throughout system evolution.}
}
@article{10015027,
	title        = {Visualizing Anti-Patterns in Microservices at Runtime: A Systematic Mapping Study},
	author       = {Parker, Garrett and Kim, Samuel and Maruf, Abdullah Al and Cerny, Tomas and Frajtak, Karel and Tisnovsky, Pavel and Taibi, Davide},
	year         = 2023,
	month        = {jan},
	journal      = {IEEE Access},
	volume       = 11,
	number       = {},
	pages        = {4434--4442},
	doi          = {10.1109/ACCESS.2023.3236165},
	issn         = {2169-3536},
	abstract     = {In the world of microservices, companies must be able to create systems that operate in the most efficient way. To achieve this, anti-patterns must be avoided because of their detriment to the quality of the system. Some of the most troubling anti-patterns are hard to detect because of their appearance at runtime. Effectively removing anti-patterns from a system requires dynamic analysis because of the large size of microservice-based systems. While the detection of anti-patterns is helpful, being able to visualize them offers a great benefit to companies working with microservices. Seeing how the overall system is flowing and recognizing the existence of anti-patterns can help improve microservice-based systems. In this paper, a systematic mapping study was performed to find the current state of research on visualizing anti-patterns in microservices from the dynamic perspective. Several hundred papers were examined and a total of 31 were found to be relevant to the research topic. The papers, when analyzed, revealed that there are mechanisms to detect anti-patterns at runtime in microservices, and there are also mechanisms for visualizing the architecture of a microservice-based system. This studyâ€™s findings could help to identify and remove anti-patterns that occur during runtime in microservices, as well as a means of visualizing these anti-patterns.},
	keywords     = {}
}
@article{9944666,
	title        = {Visualizing Microservice Architecture in the Dynamic Perspective: A Systematic Mapping Study},
	author       = {Gortney, Mia E. and Harris, Patrick E. and Cerny, Tomas and Maruf, Abdullah Al and Bures, Miroslav and Taibi, Davide and Tisnovsky, Pavel},
	year         = 2022,
	month        = {nov},
	journal      = {IEEE Access},
	volume       = 10,
	number       = {},
	pages        = {119999--120012},
	doi          = {10.1109/ACCESS.2022.3221130},
	issn         = {2169-3536},
	abstract     = {As microservices become more popular, more drawbacks become apparent to developers. One issue that many teams face today is the failure to visualize the entire system architecture holistically. Without a full view of the system, the architecture can become convoluted as teams add and subtract from their system without reconciling their changes. One established practice to determine a view on the entire system involves dynamic analysis of microservice interaction and dependencies. In this mapping study, we investigate dynamic analysis as a way to visualize system architecture. Capturing the architectural view with dynamic analysis has the ability to build the system and then show its behavior at run-time. We identify dynamic analysis techniques, the corresponding tools, and the models that these practices can generate. The findings of this study are relevant to developers of decentralized systems looking for a way to visualize their system architecture in a dynamic perspective.},
	keywords     = {}
}
@inproceedings{9912631,
	title        = {Using Microservice Telemetry Data for System Dynamic Analysis},
	author       = {Al Maruf, Abdullah and Bakhtin, Alexander and Cerny, Tomas and Taibi, Davide},
	year         = 2022,
	month        = {Aug},
	booktitle    = {2022 IEEE International Conference on Service-Oriented System Engineering (SOSE)},
	volume       = {},
	number       = {},
	pages        = {29--38},
	doi          = {10.1109/SOSE55356.2022.00010},
	issn         = {2642-6587},
	abstract     = {Microservices bring various benefits to software systems. They also bring decentralization and lose coupling across self-contained system parts. Since these systems likely evolve in a decentralized manner, they need to be monitored to identify when possibly poorly designed extensions deteriorate the overall system quality. For monolith systems, such tasks have been commonly addressed through static analysis. However, given the decentralization and possible language diversity across microservices, static analysis tools are lacking. On the other hand, there are available tools commonly used by practitioners that offer centralized logging, tracing, and metric collection for microservices. In this paper, we assess the opportunity to combine current dynamic analysis tools with anomaly detection in the form of quality metrics and anti-patterns. We develop a tool prototype that we use to assess a large microservice system benchmark demonstrating the feasibility and potential of such an approach.},
	keywords     = {}
}
@inproceedings{9912621,
	title        = {Microvision: Static analysis-based approach to visualizing microservices in augmented reality},
	author       = {Cerny, Tomas and Abdelfattah, Amr S. and Bushong, Vincent and Al Maruf, Abdullah and Taibi, Davide},
	year         = 2022,
	month        = {Aug},
	booktitle    = {2022 IEEE International Conference on Service-Oriented System Engineering (SOSE)},
	volume       = {},
	number       = {},
	pages        = {49--58},
	doi          = {10.1109/SOSE55356.2022.00012},
	issn         = {2642-6587},
	abstract     = {Microservices are supporting digital transformation; however, fundamental tools and system perspectives are missing to better observe, understand, and manage these systems, their properties, and their dependencies. Microservices architecture leans toward decentralization, which yields many advantages to system operation; it, however, brings challenges to their development. Microservices lack a system-centric perspective to better cope with system evolution and quality assessment. In this work, we explore microservice-specific architecture reconstruction based on static analysis. Such reconstruction typically results in system models to visualize selected system-centric perspectives. Conventional models are limited in utility when the service cardinality is high. We consider an alternative data visualization using 3D space using augmented reality. To begin testing the feasibility of deriving such perspectives from microservice systems, we developed and implemented prototype tools for software architecture reconstruction and visualization of compared perspectives.},
	keywords     = {}
}
@inproceedings{9912633,
	title        = {Microservice Architecture Reconstruction and Visualization Techniques: A Review},
	author       = {Cerny, Tomas and Abdelfattah, Amr S. and Bushong, Vincent and Al Maruf, Abdullah and Taibi, Davide},
	year         = 2022,
	month        = {Aug},
	booktitle    = {2022 IEEE International Conference on Service-Oriented System Engineering (SOSE)},
	volume       = {},
	number       = {},
	pages        = {39--48},
	doi          = {10.1109/SOSE55356.2022.00011},
	issn         = {2642-6587},
	abstract     = {Microservice system solutions are now mainstream. The older microservices-based systems are not more than 15 years old, and their architecture is by far different than the one originally designed because of several changes applied to the systems due to the implementation of new features and bug fixing. The evolution of these legacy systems is therefore subjected to degradation. One of the most important methods to identify degradation is being able to reconstruct the software architecture of a system based on the current system running in production. Different methods have been proposed in the past: methods based on the static analysis of the source code of the microservices and methods based on the analysis of the log traces collected at runtime. Both static and dynamic analysis-based methods have their pros ad cons. In this work, we review the existing technologies for static and dynamic architectural reconstruction and related tools adopted to visualize the reconstructed architecture. The result of this work can be useful both to practitioners and researchers that can further develop these methods to provide better support for architectural degradation.},
	keywords     = {}
}
@inproceedings{9860229,
	title        = {Survey on Tools and Techniques Detecting Microservice API Patterns},
	author       = {Bakhtin, Alexander and Al Maruf, Abdullah and Cerny, Tomas and Taibi, Davide},
	year         = 2022,
	month        = {July},
	booktitle    = {2022 IEEE International Conference on Services Computing (SCC)},
	volume       = {},
	number       = {},
	pages        = {31--38},
	doi          = {10.1109/SCC55611.2022.00018},
	issn         = {2474-2473},
	abstract     = {It is well recognized that design patterns improve system development and maintenance in many aspects. While we commonly recognize these patterns in monolithic systems, many patterns emerged for cloud computing, specifically microservices. Unfortunately, while various patterns have been proposed, available quality assessment tools often do not recognize many. This article performs a grey literature review to find and catalog available tools to detect microservice API patterns (MAP). It reasons about mechanisms that can be used to detect these patterns. Furthermore, the results indicate gaps and opportunities for improvements for quality assessment tools. Finally, the reader is provided with a route map to detection techniques that can be used to mine MAPs.},
	keywords     = {}
}
@article{electronics11121880,
	title        = {Code Smell Prioritization with Business Process Mining and Static Code Analysis: A Case Study},
	author       = {Islam, Md Rofiqul and Al Maruf, Abdullah and Cerny, Tomas},
	year         = 2022,
	month        = {June},
	journal      = {Electronics},
	volume       = 11,
	number       = 12,
	doi          = {10.3390/electronics11121880},
	issn         = {2079-9292},
	url          = {https://www.mdpi.com/2079-9292/11/12/1880},
	article-number = 1880,
	abstract     = {One of the most significant impediments to the long-term maintainability of software applications is code smells. Keeping up with the best coding practices can be difficult for software developers, which might lead to performance throttling or code maintenance concerns. As a result, it is imperative that large applications be regularly monitored for performance issues and code smells, so that these issues can be corrected promptly. Resolving code smells in software systems can be done in a variety of ways, but doing so all at once would be prohibitively expensive and can be out of budget. Prioritizing these solutions are therefore critical. The majority of current research prioritizes code smells according to the type of smell they cause. This method, however, is not sufficient because of a lack of knowledge regarding the frequency of code usage and code changeability behavior. Even the most complex programs have some components that are more important than others. Maintaining the functionality of certain parts is essential since they are often used. Identifying and correcting code smells in places that are frequently utilized and subject to rapid change should take precedence over other code smells. A novel strategy is proposed for finding frequently used and change-prone areas in a codebase by combining business logic, heat map information, and commit history analysis in this study. It examines the codebase, commits, and log files of Java applications to identify business processes, heat map graphs, and severity levels of various types of code smells and their commit history. This is done in order to present a comprehensive, efficient, and resource-friendly technique for identifying and prioritizing performance throttling with also handling code maintenance concerns.}
}
@article{10.1145/3512753.3512755,
	title        = {Technical Debt Resulting from Architectural Degradation and Code Smells: A Systematic Mapping Study},
	author       = {Das, Dipta and Maruf, Abdullah Al and Islam, Rofiqul and Lambaria, Noah and Kim, Samuel and Abdelfattah, Amr S. and Cerny, Tomas and Frajtak, Karel and Bures, Miroslav and Tisnovsky, Pavel},
	year         = 2022,
	month        = {jan},
	journal      = {SIGAPP Appl. Comput. Rev.},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 21,
	number       = 4,
	pages        = {20â€“36},
	doi          = {10.1145/3512753.3512755},
	issn         = {1559-6915},
	url          = {https://doi.org/10.1145/3512753.3512755},
	issue_date   = {December 2021},
	abstract     = {Poor design choices, bad coding practices, or the need to produce software quickly can stand behind technical debt. Unfortunately, manually identifying and managing technical debt gets more difficult as the software matures. Recent research offers various techniques to automate the process of detecting and managing technical debt to address these challenges. This manuscript presents a mapping study of the many aspects of technical debt that have been discovered in this field of study. This includes looking at the various forms of technical debt, as well as detection methods, the financial implications, and mitigation strategies. The findings and outcomes of this study are applicable to a wide range of software development life-cycle decisions.},
	numpages     = 17,
	keywords     = {code debt, code smells, architectural degradation, technical debt, architectural debt, design debt}
}
@inproceedings{9678532,
	title        = {Using Version Control and Issue Tickets to detect Code Debt and Economical Cost},
	author       = {Al Maruf, Abdullah and Lambaria, Noah and Abdelfattah, Amr S. and Cerny, Tomas},
	year         = 2021,
	month        = {Nov},
	booktitle    = {2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	volume       = {},
	number       = {},
	pages        = {1208--1209},
	doi          = {10.1109/ASE51524.2021.9678532},
	issn         = {2643-1572},
	abstract     = {Despite the fact that there are numerous classifications of technical debt based on various criteria, Code Debt or code smells is a category that appears in the majority of current research. One of the primary causes of code debt is the urgency to deliver software quickly, as well as bad coding practices. Among many approaches, static code analysis has received the most attention in studies to detect code-smell/code debt. However, most of them examine the same programming language, although todayâ€™s software company utilizes many development stacks with various languages and tools. This problem can be resolved by detecting code debt with Issue/Ticket cards. This paper presents a method for detecting code debt leveraging natural language processing on issue tickets. It also proposes a method for calculating the average amount of time that a code debt was present in the software. This method is implemented utilizing git mining.},
	keywords     = {}
}
@inproceedings{9678749,
	title        = {Using Static Analysis to Address Microservice Architecture Reconstruction},
	author       = {Bushong, Vincent and Das, Dipta and Al Maruf, Abdullah and Cerny, Tomas},
	year         = 2021,
	month        = {Nov},
	booktitle    = {2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	volume       = {},
	number       = {},
	pages        = {1199--1201},
	doi          = {10.1109/ASE51524.2021.9678749},
	issn         = {2643-1572},
	abstract     = {Microservice design offers many advantages for enterprise applications, including increased scalability and faster deployment times. Microservicesâ€™ independence from one another in development and deployment provides these advantages. This separation, however, results in the absence of a centralized view of the applicationâ€™s functionality, and each microserviceâ€™s data model is isolated and replicated. As a result, it has the potential to deviate from the architectural designâ€™s original intent. To address this, we offer a method for analyzing a microservice mesh and generating a communication diagram, context map, and microservice-specific limited contexts using static code analysis.},
	keywords     = {}
}
@article{app11177856,
	title        = {On Microservice Analysis and Architecture Evolution: A Systematic Mapping Study},
	author       = {Bushong, Vincent and Abdelfattah, Amr S. and Maruf, Abdullah A. and Das, Dipta and Lehman, Austin and Jaroszewski, Eric and Coffey, Michael and Cerny, Tomas and Frajtak, Karel and Tisnovsky, Pavel and Bures, Miroslav},
	year         = 2021,
	month        = {July},
	journal      = {Applied Sciences},
	volume       = 11,
	number       = 17,
	doi          = {10.3390/app11177856},
	issn         = {2076-3417},
	url          = {https://www.mdpi.com/2076-3417/11/17/7856},
	article-number = 7856,
	abstract     = {Microservice architecture has become the leading design for cloud-native systems. The highly decentralized approach to software development consists of relatively independent services, which provides benefits such as faster deployment cycles, better scalability, and good separation of concerns among services. With this new architecture, one can naturally expect a broad range of advancements and simplifications over legacy systems. However, microservice system design remains challenging, as it is still difficult for engineers to understand the system module boundaries. Thus, understanding and explaining the microservice systems might not be as easy as initially thought. This study aims to classify recently published approaches and techniques to analyze microservice systems. It also looks at the evolutionary perspective of such systems and their analysis. Furthermore, the identified approaches target various challenges and goals, which this study analyzed. Thus, it provides the reader with a roadmap to the discipline, tools, techniques, and open challenges for future work. It provides a guide towards choices when aiming for analyzing cloud-native systems. The results indicate five analytical approaches commonly used in the literature, possibly in combination, towards problems classified into seven categories.}
}
